value <- x/10
print(value)
}
if(x<10){
x
}
}else{
print("Invalid input")
}
x <- 10
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
}else{
print("Invalid input")
}
x <- "hello"
x <-
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
}else{
print("Invalid input")
}
x <- "hello"
x <-
x
x
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
}else{
print("Invalid input")
}
x <- 9
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
}else{
print("Invalid input")
}
x <- 15
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
}else{
print("Invalid input")
}
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
else{
print("Invalid input")
}
}
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
else{
print("Invalid input")
}
}
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
else{
print("Invalid input")
}
}
Give_answer <- function(x){
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
else{
print("Invalid input")
}
}
}
give_answer <- function(x){
if(is.character(x) == TRUE) {
str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
print(value)
}
if(x<10){
x
}
else{
print("Invalid input")
}
}
}
give_answer("hello")
give_answer(9)
give_answer(15)
give_answer <- function(x){
if(is.character(x) == TRUE) {
return_value <- str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
return_value <- x
}
if(x<10){
return_value <- x
}
else{
return_value <- print("Invalid input")
}
}
return_value
}
give_answer("hello")
give_answer(9)
give_answer(15)
give_answer <- function(x){
if(is.character(x) == TRUE) {
return_value <- str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
return_value <- x
}
if(x<10){
return_value <- x
}
else{
return_value <- "Invalid input"
}
}
return_value
}
give_answer("hello")
give_answer(9)
give_answer(15)
give_answer <- function(x){
if(is.character(x) == TRUE) {
return_value <- str_c("The answer is: ", x)
}else if(is.numeric(x) == TRUE){
if(x>10){
value <- x/10
return_value <- x
}
if(x<10){
return_value <- x
}
else{
return_value <- "Invalid input"
}
}
return_value
}
give_answer("hello")
if(is.character(x)) {
return_value <- str_c("The answer is: ", x)
}else if(is.numeric(x)){
if(x>10){
value <- x/10
return_value <- x
}
if(x<10){
return_value <- x
}
else{
return_value <- "Invalid input"
}
}
give_answer <- function(x){
if(is.character(x)) {
return_value <- str_c("The answer is: ", x)
}else if(is.numeric(x)){
if(x>10){
value <- x/10
return_value <- x
}
if(x<10){
return_value <- x
}
else{
return_value <- "Invalid input"
}
}
return_value
}
give_answer("hello")
give_answer(9)
give_answer(15)
give_answer <- function(x){
if(is.character(x)) {
return_value <- str_c("The answer is: ", x)
}else if(is.numeric(x)){
if(x>10){
value <- x/10
return_value <- x
}else if(x<10){
return_value <- x
}
else{
return_value <- "Invalid input"
}
}
return_value
}
give_answer("hello")
give_answer(9)
give_answer(15)
give_answer(10)
give_answer(TRUE)
david_says <- function(any_input) {
return(paste("David says...", any_input))
}
david_says(any_input = "functions are good")
david_says(14)
library(tidyverse)
iris %>%
summarise(across(.fns = ~sum(is.na(.x))))
mtcars %>%
summarise(across(.fns = ~sum(is.na(.x))))
count_na <- function(data) {
data %>%
summarise(across(.fns = ~sum(is.na(.x))))
}
iris %>%
count_na()
# adding a default argument with param = argument
count_na <- function(data, only_numeric_columns = FALSE) {
if (only_numeric_columns) {
# if they only want nas of numerics
na_s <- data %>%
summarise(across(where(is.numeric), .fns = ~sum(is.na(.x))))
} else {
# otherwise return every column
na_s <- data %>%
summarise(across(.fns = ~sum(is.na(.x))))
}
return(na_s)
}
iris %>%
count_na(only_numeric_columns = TRUE)
library(stringr)
# adding a default argument with param = argument
count_na <- function(data, only_numeric_columns = FALSE) {
if (only_numeric_columns) {
# if they only want nas of numerics
na_s <- data %>%
summarise(across(where(is.numeric), .fns = ~sum(is.na(.x))))
} else {
# otherwise return every column
na_s <- data %>%
summarise(across(.fns = ~sum(is.na(.x))))
}
return(na_s)
}
iris %>%
count_na(only_numeric_columns = TRUE)
print_answer <- function(input_value) {
#guard clause (guarding against non character, non numeric inputs)
if ((!is.character(input_value)) & (!is.numeric(input_value))) {
return("invalid input")
}
print_answer <- function(input_value) {
#guard clause (guarding against non character, non numeric inputs)
if ((!is.character(input_value)) & (!is.numeric(input_value))) {
return("invalid input")
}
# if the input is a character....
if (is.character(input_value)) {
return_value <- str_c("The answer is", input_value, sep = " ")
} else if (is.numeric(input_value)) {
# else if the input is a number...
if (input_value > 10) {
#if greater than 10
return_value <- input_value/10
} else if (input_value < 10) {
# if less than 10
return_value <- input_value
} else {
#otherwise
return_value <- "Invalid input"
}
} else {
return_value <- "Invalid input"
}
return_value
}
print_answer(10)
x <- "hello"
if(is.character(x) == TRUE | is.numeric(x) == TRUE) {
if(is.character(x) == TRUE){
print(paste("The answer is: ", x))
} else {
if(x < 10){
print(x)
}else{
new_value <- x/10
print(new_value)
}
}else{
x <- "hello"
give_answer <- function(x){
if(is.character(x) == TRUE | is.numeric(x) == TRUE) {
if(is.numeric(x) == TRUE){
if(x < 10){
print(x)
}
if(x > 10){
new_value <- x/10
print(new_value)
}
if(is.character(x) == TRUE){
print(paste("The answer is: ", x))
}
}
else{
print("Invalid input")
}
}
}
give_answer <- function(x){
if(is.character(x) == TRUE | is.numeric(x) == TRUE) {
if(is.numeric(x) == TRUE){
if(x < 10){
print(x)
}
if(x > 10){
new_value <- x/10
print(new_value)
}
if(is.character(x) == TRUE){
print(paste("The answer is: ", x))
}
}
else{
print("Invalid input")
}
}
}
give_answer(9)
give_answer("hello")
give_answer(10)
give_answer(10)
give_answer <- function(x){
if(is.character(x) == TRUE | is.numeric(x) == TRUE) {
if(is.numeric(x) == TRUE){
if(x == 10){
print("Invalid input")
}
if(x < 10){
print(x)
}
if(x > 10){
new_value <- x/10
print(new_value)
}
if(is.character(x) == TRUE){
print(paste("The answer is: ", x))
}
}
else{
print("Invalid input")
}
}
}
give_answer(9)
give_answer("hello")
give_answer(10)
give_answer(15)
?all()
x <- c(1, 5, 8)
y <- c(5, 1, 8)
x
y
if(x != y){
return("Different")
}
all(x, y)
v <- c(4, 5, 8)
w <- c(9, 3, 2)
#
all(v, w)
#
v == W
#
v == w
#
all(v == w)
if(all(v == w)){
return("Different")
}
if(all(v == w)){
return("Different")
}
x <- c(1, 5, 8)
y <- c(5, 1, 8)
# same, but different order -> true
all(x == y)
# same, but different order -> true
all(x == y)
#
all(v == w)
z <- c(1, 5, 8)
# same, and correct order
all(x == z)
# same, and correct order
x2 <- sort(x)
y2 <- sort(y)
all(x2 == y2)
all(x == y)
vector_check <- function(vector1, vector2) {
if(all(vector1 == vector2)) {
print("Exactly the same")
}
if(all(sort(vector1) == sort(vector2))) {
print("The same")
}
else {
print("Different")
}
}
#Same order:
x <- c(1, 5, 8)
y <- c(1, 5, 8)
#wrong order:
a <- c(2, 5, 9)
b <- c(9, 2, 5)
# different
c <- c(1, 5, 8)
d <- c(4, 6, 3)
#text
e <- c("hello", "bye", "banana")
f <- c("hello", "bye", "banana")
vector_check(x, y)
vector_check <- function(vector1, vector2) {
if(all(vector1 == vector2)) {
return("Exactly the same")
}
if(all(sort(vector1) == sort(vector2))) {
print("The same")
}
else {
print("Different")
}
}
vector_check(x, y)
vector_check(a, b)
vector_check(c, d)
vector_check(e, f)
