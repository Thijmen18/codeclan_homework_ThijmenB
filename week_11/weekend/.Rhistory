loyal_ch + store_id +
special_ch + special_mm + list_price_diff + price_diff,
data = orange_data_tidy, family = binomial(link = "logit"))
purchase_mm_multi_logreg_model1
tidy_out1 <- clean_names(tidy(purchase_mm_multi_logreg_model1))
tidy_out1
purchase_mm_multi_logreg_model2 <- glm(purchase_mm ~
loyal_ch + store_id + price_diff,
data = orange_data_tidy, family = binomial(link = "logit"))
purchase_mm_multi_logreg_model2
tidy_out2 <- clean_names(tidy(purchase_mm_multi_logreg_model2))
tidy_out2
purchase_mm_multi_logreg_model3 <- glm(purchase_mm ~
loyal_ch + price_diff,
data = orange_data_tidy, family = binomial(link = "logit"))
purchase_mm_multi_logreg_model3
tidy_out3 <- clean_names(tidy(purchase_mm_multi_logreg_model3))
tidy_out3
library(pROC)
# Model2
# first add predictor in data
orange_pred_mod2 <- orange_data_tidy %>%
add_predictions(purchase_mm_multi_logreg_model2)
?roc
# Model2
# first add predictor in data
orange_pred_mod2 <- orange_data_tidy %>%
add_predictions(purchase_mm_multi_logreg_model2)
roc_model2_orange <- orange_pred_mod2 %>%
roc(response = purchase_mm,
predictor = loyal_ch + price_diff + store_id)
# Model 3
# first add predictor in data
orange_pred_mod3 <- orange_data_tidy %>%
add_predictions(purchase_mm_multi_logreg_model3)
roc_model3_orange <- orange_pred_mod3 %>%
roc(response = purchase_mm,
predictor = pred)
ggroc(list(roc_model2_orange, roc_model3_orange))
# Model2
# first add predictor in data
orange_pred_mod2 <- orange_data_tidy %>%
add_predictions(purchase_mm_multi_logreg_model2)
roc_model2_orange <- orange_pred_mod2 %>%
roc(response = purchase_mm,
predictor = pred)
# Model 3
# first add predictor in data
orange_pred_mod3 <- orange_data_tidy %>%
add_predictions(purchase_mm_multi_logreg_model3)
roc_model3_orange <- orange_pred_mod3 %>%
roc(response = purchase_mm,
predictor = pred)
ggroc(list(roc_model2_orange, roc_model3_orange))
auc(roc_model2_orange)
auc(roc_model3_orange)
library(caret)
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 100,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model2_3pred_orange_cv <- train(purchase_mm_multi_logreg_model2$formula,
data = orange_data_tidy,
trControl = train_control,
method = "glm",
family = binomial(link = "logit"))
orange_data_tidy <- orange_data_tidy %>%
mutate(purchase_mm = as_factor(purchase_mm))
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 100,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model2_3pred_orange_cv <- train(purchase_mm_multi_logreg_model2$formula,
data = orange_data_tidy,
trControl = train_control,
method = "glm",
family = binomial(link = "logit"))
orange_data_tidy
?make.names
orange_data_tidy <- orange_data_tidy %>%
mutate(purchase_mm = as_factor(purchase_mm),
purchase_mm = relevel(purchase_mm, ref = "f"))
?relevel
orange_data_tidy <- orange_data_tidy %>%
mutate(purchase_mm = as_factor(purchase_mm),
purchase_mm = relevel(purchase_mm, ref = FALSE))
orange_data_tidy <- orange_data_tidy %>%
mutate(purchase_mm = as_factor(purchase_mm),
purchase_mm = relevel(purchase_mm, ref = "FALSE"))
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 100,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model2_3pred_orange_cv <- train(purchase_mm_multi_logreg_model2$formula,
data = orange_data_tidy,
trControl = train_control,
method = "glm",
family = binomial(link = "logit"))
#wrangle the variables
orange_data <- orange %>%
mutate(purchase_mm = if_else(purchase == "MM", TRUE, FALSE), .before = purchase) %>%
mutate(store_id = as_factor(store_id),
special_ch = as_logical(special_ch),
special_mm = as_logical(special_mm),
store7 = if_else(store7 == "Yes", TRUE, FALSE),
store = as_factor(store)) %>%
select(-purchase)
#wrangle the variables
orange_data <- orange %>%
mutate(purchase_mm = if_else(purchase == "MM", TRUE, FALSE), .before = purchase) %>%
mutate(store_id = as_factor(store_id),
special_ch = as.logical(special_ch),
special_mm = as.logical(special_mm),
store7 = if_else(store7 == "Yes", TRUE, FALSE),
store = as_factor(store)) %>%
select(-purchase)
alias(purchase_mm ~ ., data = orange_data)
orange_data_tidy <- orange_data %>%
select(-sale_price_mm, -sale_price_ch, -store7, -price_ch, -price_mm, -disc_ch, -disc_mm, -store)
alias(purchase_mm ~ ., data = orange_data_tidy)
split1 <- orange_data_tidy %>%
select(purchase_mm, weekof_purchase, store_id, special_ch, special_mm)
split2 <- orange_data_tidy %>%
select(purchase_mm, loyal_ch, price_diff, pct_disc_ch, pct_disc_mm)
split3 <- orange_data_tidy %>%
select(purchase_mm, list_price_diff)
split1 %>%
ggpairs()
purchase_mm_multi_logreg_model <- glm(purchase_mm ~
loyal_ch + weekof_purchase + store_id +
special_ch + special_mm + list_price_diff + price_diff,
data = orange_data_tidy, family = binomial(link = "logit"))
purchase_mm_multi_logreg_model
summary(purchase_mm_multi_logreg_model)
orange_data_tidy <- orange_data %>%
select(-sale_price_mm, -sale_price_ch, -store7, -store, -list_price_diff, -price_diff)
alias(purchase_mm ~ ., data = orange_data_tidy)
orange_data_tidy
split1 <- orange_data_tidy %>%
select(purchase_mm, weekof_purchase, store_id, price_ch, price_mm, disc_ch, disc_mm)
split1 <- orange_data_tidy %>%
select(purchase_mm, weekof_purchase, store_id, price_ch, price_mm, disc_ch, disc_mm)
split2 <- orange_data_tidy %>%
select(purchase_mm, special_ch, special_mm, loyal_ch, pct_disc_mm, pct_disc_ch)
split1 %>%
ggpairs()
split2 %>%
ggpairs()
purchase_mm_multi_logreg_model <- glm(purchase_mm ~
loyal_ch + weekof_purchase + store_id +
special_ch + special_mm + price_mm + price_ch,
data = orange_data_tidy, family = binomial(link = "logit"))
purchase_mm_multi_logreg_model
summary(purchase_mm_multi_logreg_model)
tidy_out <- clean_names(tidy(purchase_mm_multi_logreg_model))
tidy_out
# lets remove only weekof_purchase from the model, to see if this influences the others
purchase_mm_multi_logreg_model1 <- glm(purchase_mm ~
loyal_ch + store_id +
special_ch + special_mm + price_mm + price_ch,
data = orange_data_tidy, family = binomial(link = "logit"))
purchase_mm_multi_logreg_model1
summary(purchase_mm_multi_logreg_model1)
tidy_out1 <- clean_names(tidy(purchase_mm_multi_logreg_model1))
tidy_out1
purchase_mm_multi_logreg_model2 <- glm(purchase_mm ~
loyal_ch + store_id +
special_ch + special_mm + price_mm + price_ch,
data = orange_data_tidy, family = binomial(link = "logit"))
summary(purchase_mm_multi_logreg_model2)
tidy_out1 <- clean_names(tidy(purchase_mm_multi_logreg_model2))
tidy_out1
purchase_mm_multi_logreg_model3 <- glm(purchase_mm ~
loyal_ch + store_id +
special_mm + price_mm + price_ch,
data = orange_data_tidy, family = binomial(link = "logit"))
summary(purchase_mm_multi_logreg_model3)
tidy_out1 <- clean_names(tidy(purchase_mm_multi_logreg_model3))
tidy_out1
summary(purchase_mm_multi_logreg_model3)
library(caret)
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 100,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
summary(purchase_mm_multi_logreg_model2)
model3_5pred_orange_cv <- train(purchase_mm_multi_logreg_model3$formula,
data = orange_data_tidy,
trControl = train_control,
method = "glm",
family = binomial(link = "logit"))
orange_data_tidy <- orange_data_tidy %>%
mutate(purchase_mm = as_factor(purchase_mm))
model3_5pred_orange_cv <- train(purchase_mm_multi_logreg_model3$formula,
data = orange_data_tidy,
trControl = train_control,
method = "glm",
family = binomial(link = "logit"))
orange_data_tidy
orange_data_tidy <- orange_data_tidy %>%
mutate(purchase_mm = as_factor(purchase_mm),
special_ch = as_factor(special_ch),
special_mm = as_factor(special_mm))
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 100,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
model3_5pred_orange_cv <- train(purchase_mm_multi_logreg_model3$formula,
data = orange_data_tidy,
trControl = train_control,
method = "glm",
family = binomial(link = "logit"))
test_indices <- sample(1:nrow(orange_data_tidy), size = as.integer(nrow(orange_data_tidy) * 0.2))
train <- orange_data_tidy %>%
slice(-test_indices)
test <- orange_data_tidy %>%
slice(-test_indices)
# sanity check
nrow(train) + nrow(test) == nrow(orange_data_tidy)
test <- orange_data_tidy %>%
slice(test_indices)
# sanity check
nrow(train) + nrow(test) == nrow(orange_data_tidy)
train %>%
tabyl(purchase_mm)
test %>%
tabyl(purchase_mm)
model_1 <- glm(purchase_mm ~
loyal_ch + weekof_purchase + store_id +
special_ch + special_mm + price_mm + price_ch,
data = train, family = binomial(link = "logit"))
model_1
summary(model_1)
tidy_out1 <- clean_names(tidy(model_1))
tidy_out1
model_2 <- glm(purchase_mm ~
loyal_ch + special_mm + price_mm + price_ch,
data = train, family = binomial(link = "logit"))
model_2
summary(model_2)
tidy_out2 <- clean_names(tidy(model_2))
tidy_out2
model_3 <- glm(purchase_mm ~
loyal_ch + special_mm + price_mm + price_ch + store_id,
data = train, family = binomial(link = "logit"))
model_3
summary(model_3)
tidy_out3 <- clean_names(tidy(model_3))
tidy_out3
bic(model_1)
#
auc(model_3)
auc(model_1)
summary(model_1)
# Model2
# first add predictor in data
orange_pred_model_1 <- orange_data_tidy %>%
add_predictions(model_1)
roc_orange_model_1 <- orange_pred_model_1 %>%
roc(response = purchase_mm,
predictor = pred)
# Model2
# first add predictor in data
orange_pred_model_2 <- orange_data_tidy %>%
add_predictions(model_2)
roc_orange_model_2 <- orange_pred_model_2 %>%
roc(response = purchase_mm,
predictor = pred)
# Model2
# first add predictor in data
orange_pred_model_3 <- orange_data_tidy %>%
add_predictions(model_3)
roc_orange_model_3 <- orange_pred_model_3 %>%
roc(response = purchase_mm,
predictor = pred)
# plot:
ggroc(list(roc_orange_model_1, roc_orange_model_2, roc_orange_model_3))
auc(roc_orange_model_1)
#0.8913
auc(roc_orange_model_2)
#0.8885
auc(roc_orange_model_3)
# Model1
# first add predictor in data
orange_pred_model_1 <- train %>%
add_predictions(model_1)
roc_orange_model_1 <- orange_pred_model_1 %>%
roc(response = purchase_mm,
predictor = pred)
# Model2
# first add predictor in data
orange_pred_model_2 <- train %>%
add_predictions(model_2)
roc_orange_model_2 <- orange_pred_model_2 %>%
roc(response = purchase_mm,
predictor = pred)
# Model2
# first add predictor in data
orange_pred_model_3 <- train %>%
add_predictions(model_3)
roc_orange_model_3 <- orange_pred_model_3 %>%
roc(response = purchase_mm,
predictor = pred)
# plot:
ggroc(list(roc_orange_model_1, roc_orange_model_2, roc_orange_model_3))
auc(roc_orange_model_1)
#0.898
auc(roc_orange_model_2)
#0.8967
auc(roc_orange_model_3)
# Model1
# first add predictor in data
orange_pred_model_1 <- test %>%
add_predictions(model_1)
roc_orange_model_1 <- orange_pred_model_1 %>%
roc(response = purchase_mm,
predictor = pred)
# Model2
# first add predictor in data
orange_pred_model_2 <- test %>%
add_predictions(model_2)
roc_orange_model_2 <- orange_pred_model_2 %>%
roc(response = purchase_mm,
predictor = pred)
# Model2
# first add predictor in data
orange_pred_model_3 <- test %>%
add_predictions(model_3)
roc_orange_model_3 <- orange_pred_model_3 %>%
roc(response = purchase_mm,
predictor = pred)
# plot:
ggroc(list(roc_orange_model_1, roc_orange_model_2, roc_orange_model_3))
auc(roc_orange_model_1)
#0.8653
auc(roc_orange_model_2)
#0.8577
auc(roc_orange_model_3)
model_4 <- glm(purchase_mm ~ loyal_ch + special_mm + price_mm + price_ch + loyal_ch:special_mm,
data = train, family = binomial(link = "logit"))
model_5 <- glm(purchase_mm ~ loyal_ch + special_mm + price_mm + price_ch + loyal_ch:price_mm,
data = train, family = binomial(link = "logit"))
model_6 <- glm(purchase_mm ~ loyal_ch + special_mm + price_mm + price_ch + loyal_ch:price_ch,
data = train, family = binomial(link = "logit"))
model_7 <- glm(purchase_mm ~ loyal_ch + special_mm + price_mm + price_ch + special_mm:price_mm,
data = train, family = binomial(link = "logit"))
model_8 <- glm(purchase_mm ~ loyal_ch + special_mm + price_mm + price_ch + special_mm:price_ch,
data = train, family = binomial(link = "logit"))
model_9 <- glm(purchase_mm ~ loyal_ch + special_mm + price_mm + price_ch + price_mm:price_ch,
data = train, family = binomial(link = "logit"))
summary(model_4)
summary(model_5) #not sig
summary(model_6) #not sig
summary(model_7) #not sig
summary(model_9) #not sig
# compare AUC scores on test data set
roc_4 <- test %>%
add_predictions(model_4, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
roc_5 <- test %>%
add_predictions(model_5, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
roc_6 <- test %>%
add_predictions(model_6, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
roc_7 <- test %>%
add_predictions(model_7, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
roc_8 <- test %>%
add_predictions(model_8, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
roc_9 <- test %>%
add_predictions(model_9, type = "response") %>%
roc(response = purchase_mm, predictor = pred)
auc(roc_4)
#0.8572
auc(roc_5)
#0.8577
auc(roc_6)
#0.8593
auc(roc_7)
#0.8584
auc(roc_8)
#0.8573
auc(roc_9)
library(tidyverse)
library(tidytext)
library(ggwordcloud)
library(janeaustenr)
head(austen_books(mansfieldpark))
?austen_books
austen_books() %>%
head()
austen_books() %>%
distinct(book)
class(mansfieldpark)
mansfield <- tibble(
id = 1:length(mansfieldpark),
text = mansfieldpark
) %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE)
sens <- tibble(
id = 1:length(sensesensibility),
text = sensesensibility
) %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE)
mansfield
#remove the stop_words
mansfield %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
mansfield <- tibble(
id = 1:length(mansfieldpark),
text = mansfieldpark
) %>%
unnest_tokens(word, text)
sens <- tibble(
id = 1:length(sensesensibility),
text = sensesensibility
) %>%
unnest_tokens(word, text)
#remove the stop_words
mansfield %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
sens <- tibble(
id = 1:length(sensesensibility),
text = sensesensibility
) %>%
unnest_tokens(word, text)
pride_word_count <- sense %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
sense <- tibble(
id = 1:length(sensesensibility),
text = sensesensibility
) %>%
unnest_tokens(word, text)
pride_word_count <- sense %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
mansfield_word_count
mansfield_word_count
#remove the stop_words
mansfield_word_count <- mansfield %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
mansfield_word_count
pride_word_count
mansfield_word_count
pride_word_count
#remove the stop_words
mansfield_total_word_count <- mansfield %>%
count(word, sort = TRUE)
pride_total_word_count <- sense %>%
count(word, sort = TRUE)
mansfield_total_word_count
pride_total_word_count
mansfield_word_count %>%
inner_join(get_sentiments("affinn")) #%>%
mansfield_word_count %>%
inner_join(get_sentiments("afinn")) #%>%
mansfield_word_count
mansfield_common_sentiment_words <- mansfield_word_count %>%
inner_join(get_sentiments("afinn")) #%>%
pride_common_sentiment_words <- pride_word_count %>%
inner_join(get_sentiments("afinn")) %>%
slice(1:10)
mansfield_common_sentiment_words
pride_common_sentiment_words
mansfield %>%
inner_join(get_sentiments("afinn")) #%>%
mansfield %>%
inner_join(get_sentiments("afinn")) %>%
mutate(word_n = row_number()) %>%
mutate(story_position = word_n/max(word_n)) %>%
ggplot() +
aes(x = story_position, y = value) +
geom_smooth(se = FALSE)
sense %>%
inner_join(get_sentiments("afinn")) %>%
mutate(word_n = row_number()) %>%
mutate(story_position = word_n/max(word_n)) %>%
ggplot() +
aes(x = story_position, y = value) +
geom_smooth(se = FALSE)
mansfield %>%
inner_join(get_sentiments("afinn")) %>%
mutate(word_n = row_number()) %>%
mutate(story_position = word_n/max(word_n)) %>%
ggplot() +
aes(x = story_position, y = value) +
geom_smooth(se = FALSE)
sense %>%
inner_join(get_sentiments("afinn")) %>%
mutate(word_n = row_number()) %>%
mutate(story_position = word_n/max(word_n)) %>%
ggplot() +
aes(x = story_position, y = value) +
geom_smooth(se = FALSE)
