ls("raw_data/")
ls("raw_data/.")
ls("./raw_data")
ls("/raw_data")
ls("raw_data/")
ls()
dir_ls("raw_data/", regexp = "customers.csv$")
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
?write_lines
ignore_customer_data <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
write_tsv(ignore_customer_data, "to_ignore.txt")
write_csv(ignore_customer_data, "to_ignore.csv")
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10) %>%
class()
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
files_to_ignore <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
# write text file containing the names
writeLines(files_to_ignore, "ignore_files.txt")
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup()
# first load libraries
library(tidyverse)
library(fs)
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup()
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)), ~ median(.x, na.rm = TRUE) )
customers_all %>%
group_by(customer_gender, customer_country) #%>%
mutate(across(where(is.numeric)) = coalesce(across(where(is.numeric)), ~ median(.x, na.rm = TRUE) ))
mutate(across(where(is.numeric)) = coalesce(across(~ median(.x, na.rm = TRUE) )))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)) = coalesce(across(~ median(.x, na.rm = TRUE) )))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)) = coalesce(across(where(is.numeric)), ~ median(.x, na.rm = TRUE) ))
customers
customers_all
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(customer_age = coalesce(customer_age, median(.x, na.rm = TRUE) ))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(customer_age = coalesce(customer_age, median(customer_age, na.rm = TRUE) ))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)) = coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE) )) )
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE) )) )
?coalesce
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ coalesce(median(.x, na.rm = TRUE)) )) )
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ is.na(median(.x, na.rm = TRUE)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ na_if(median(.x, na.rm = TRUE)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(na_if(.x), na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))))
if.na()
?if.na()
?na_if()
?is.na()
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(.x), na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(x), na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(.x), na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(.x), na.rm = FALSE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = FALSE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))), na.rm = TRUE)
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))), na.rm = FALSE)
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)), ~ median(.x, na.rm = TRUE))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric)), median(.x, na.rm = TRUE))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric(NA)), ~ median(.x, na.rm = TRUE))))
mutate(coalesce(across(where(is.numeric, ~ median(.x, na.rm = TRUE))))
customers_all %>%
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric)), ~ median(.x, na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric)), ~ median(.x, na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric)), ~ median(.x, na.rm = TRUE)))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric)), ~ median(.x, na.rm = TRUE)))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(customer_age = coalesce(customer_age, median(customer_age, na.rm = TRUE) ))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))))
?across
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric), ~ median(is.na(.x))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(.x)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(.x), na.rm = TRUE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(is.na(.x), na.rm = FALSE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE))))
?median
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = FALSE))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE
))))
customers_all %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE
))))
customers_all %>%
mutate(coalesce(across(is.na(where(is.numeric)), ~ median(.x, na.rm = TRUE
))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(is.na(where(is.numeric)), ~ median(.x, na.rm = TRUE
))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE
))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE
))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ is.na(median(.x, na.rm = TRUE
)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ median(.x, na.rm = TRUE
))))
?if_na
?if.na
is.na()
?is.na()
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ is.na(median(.x, na.rm = TRUE
)))))
mutate(coalesce(across(where(is.numeric), ~ if_else(is.na(.x), median(.x, na.rm = TRUE
customers_all %>%
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ if_else(.x = NA, median(.x, na.rm = TRUE
)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ if_else(is.na(x), median(.x, na.rm = TRUE
)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(across(where(is.numeric), ~ if_else(is.na(.x), median(.x, na.rm = TRUE
)))))
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric), ~ coalesce(., median(., na.rm = TRUE))))
# Q1 - Load in the transaction data and create a column date from the day, month and year columns.
# first load libraries
library(tidyverse)
# load in dataset
toy_transactions <- read_csv("raw_data/toy_transactions.csv")
# do some data exploration
head(toy_transactions)
#glimpse(toy_transactions)
# create the column date from day, month, year
transactions <- toy_transactions %>%
mutate(date = make_datetime(year, month, day), .before = day)
# Q2 - Load in the toys data and:
# 1. Convert the weight column to numeric.
toys <- read_csv("raw_data/toys.csv")
toys_weight <- toys %>%
mutate(weight = str_replace(weight, "[g]", replacement = "")) %>%
mutate(weight = as.numeric(weight)) %>%
rename(weight_g = weight)
# 2. Split the extra information from the product into a new column, so you have
# two columns: product_name and product_title. Make sure you don’t have any extra
# whitespace in either column.
toy_details <- toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
select(!product) %>%
rename(toy_id = id, quality_id = quality)
# Q3 - Load in the dataset on quality labels and:
# 1. Remove the unnecessary information for each descriptor
quality_raw <- read_csv("raw_data/quality.csv")
quality <- quality_raw %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad")) %>%
rename(quality_id = id)
# Q4 - create a dataframe called customers which contains data on customers from
# all countries by reading in and binding all customer datasets in one pipeline
library(fs)
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
# Q5 - Impute missing values in numeric columns with the median value of customers
# with the same gender and country.
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric), ~ coalesce(., median(., na.rm = TRUE))))
# Q7 - Join your four cleaned datasets together and call the joined dataset toys_joined.
# This join should keep all observations from all tables.
toys_joined <- transactions %>%
full_join(customers, by = "customer_id") %>%
full_join(toy_details, by = "toy_id") %>%
left_join(quality, by = "quality_id")
# Q9 - Remove any personally identifiable or sensitive information on customers
# I will make data rows anonymous by removing all but initials
toys_joined_anonymous <- toys_joined %>%
mutate(first_name = str_sub(first_name, start = 1, end = 1)) %>%
mutate(last_name = str_sub(last_name, start = 1, end = 1))
# Q10 - Write your new joined dataset (which does not contain personal/sensitive information) to a csv file
toys_joined_anonymous %>%
write_csv("toy_purchases_anonymous.csv")
# add the following sensitive customer info files to gitignore:
files_to_ignore <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
# write text file containing the names
writeLines(files_to_ignore, "ignore_files.txt")
# And add these files to the gitignore file (see screenshot provided as evidence!)
# first load libraries
library(tidyverse)
# load in dataset
toy_transactions <- read_csv("raw_data/toy_transactions.csv")
# create the column date from day, month, year
transactions <- toy_transactions %>%
mutate(date = make_datetime(year, month, day), .before = day)
toys <- read_csv("raw_data/toys.csv")
toys_weight <- toys %>%
mutate(weight = str_replace(weight, "[g]", replacement = "")) %>%
mutate(weight = as.numeric(weight)) %>%
rename(weight_g = weight)
?separate
toys_weight
toys_weight %>%
separate(product, " - ", names = c("product_name", "product_title"))
toys_weight %>%
separate(col = "product", sep = " - ", into = c("product_name", "product_title"))
toys_weight %>%
separate(col = "product", sep = " - ", into = c("product_name", "product_title")) %>%
rename(toy_id = id, quality_id = quality)
toy_details <- toys_weight %>%
separate(col = "product", sep = " - ", into = c("product_name", "product_title")) %>%
rename(toy_id = id, quality_id = quality)
# Q1 - Load in the transaction data and create a column date from the day, month and year columns.
# first load libraries
library(tidyverse)
# load in dataset
toy_transactions <- read_csv("raw_data/toy_transactions.csv")
# do some data exploration
head(toy_transactions)
#glimpse(toy_transactions)
# create the column date from day, month, year
transactions <- toy_transactions %>%
mutate(date = make_datetime(year, month, day), .before = day)
transactions
# Q2 - Load in the toys data and:
# 1. Convert the weight column to numeric.
toys <- read_csv("raw_data/toys.csv")
toys_weight <- toys %>%
mutate(weight = str_replace(weight, "[g]", replacement = "")) %>%
mutate(weight = as.numeric(weight)) %>%
rename(weight_g = weight)
toys_weight
# 2. Split the extra information from the product into a new column, so you have
# two columns: product_name and product_title. Make sure you don’t have any extra
# whitespace in either column.
# old method ( please skip!)
# toy_details <- toys_weight %>%
#  mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
#  mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
#  mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
#  mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
#  select(!product) %>%
#  rename(toy_id = id, quality_id = quality)
# Or alternatively (safer and much easier!):
toy_details <- toys_weight %>%
separate(col = "product", sep = " - ", into = c("product_name", "product_title")) %>%
rename(toy_id = id, quality_id = quality)
toy_details
# Q3 - Load in the dataset on quality labels and:
# 1. Remove the unnecessary information for each descriptor
quality_raw <- read_csv("raw_data/quality.csv")
quality <- quality_raw %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad")) %>%
rename(quality_id = id)
quality
# Q4 - create a dataframe called customers which contains data on customers from
# all countries by reading in and binding all customer datasets in one pipeline
library(fs)
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
customers_all
# Q5 - Impute missing values in numeric columns with the median value of customers
# with the same gender and country.
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric), ~ coalesce(., median(., na.rm = TRUE))))
customers
# Q7 - Join your four cleaned datasets together and call the joined dataset toys_joined.
# This join should keep all observations from all tables.
toys_joined <- transactions %>%
full_join(customers, by = "customer_id") %>%
full_join(toy_details, by = "toy_id") %>%
left_join(quality, by = "quality_id")
toys_joined
# Q9 - Remove any personally identifiable or sensitive information on customers
# Let's remove columns that hold sensitive information:
toys_joined_anonymous <- toys_joined %>%
mutate(first_name = str_sub(first_name, start = 1, end = 1)) %>%
mutate(last_name = str_sub(last_name, start = 1, end = 1))
toys_joined_anonymous
# Q10 - Write your new joined dataset (which does not contain personal/sensitive information) to a csv file
toys_joined_anonymous %>%
write_csv("toy_purchases_anonymous.csv")
# add the following sensitive customer info files to gitignore:
files_to_ignore <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
files_to_ignore
# write text file containing the names
writeLines(files_to_ignore, "ignore_files.txt")
# And add these files to the gitignore file (see screenshot provided as evidence!)
toys_joined
toys_joined %>%
select(-first_name, -last_name, -customer_age, -customer_gender)
# Q1 - Load in the transaction data and create a column date from the day, month and year columns.
# first load libraries
library(tidyverse)
# load in dataset
toy_transactions <- read_csv("raw_data/toy_transactions.csv")
# do some data exploration
head(toy_transactions)
#glimpse(toy_transactions)
# create the column date from day, month, year
transactions <- toy_transactions %>%
mutate(date = make_datetime(year, month, day), .before = day)
transactions
# Q2 - Load in the toys data and:
# 1. Convert the weight column to numeric.
toys <- read_csv("raw_data/toys.csv")
toys_weight <- toys %>%
mutate(weight = str_replace(weight, "[g]", replacement = "")) %>%
mutate(weight = as.numeric(weight)) %>%
rename(weight_g = weight)
toys_weight
# 2. Split the extra information from the product into a new column, so you have
# two columns: product_name and product_title. Make sure you don’t have any extra
# whitespace in either column.
# old method ( please skip!)
# toy_details <- toys_weight %>%
#  mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
#  mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
#  mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
#  mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
#  select(!product) %>%
#  rename(toy_id = id, quality_id = quality)
# Or alternatively (safer and much easier!):
toy_details <- toys_weight %>%
separate(col = "product", sep = " - ", into = c("product_name", "product_title")) %>%
rename(toy_id = id, quality_id = quality)
toy_details
# Q3 - Load in the dataset on quality labels and:
# 1. Remove the unnecessary information for each descriptor
quality_raw <- read_csv("raw_data/quality.csv")
quality <- quality_raw %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad")) %>%
rename(quality_id = id)
quality
# Q4 - create a dataframe called customers which contains data on customers from
# all countries by reading in and binding all customer datasets in one pipeline
library(fs)
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
customers_all
# Q5 - Impute missing values in numeric columns with the median value of customers
# with the same gender and country.
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(across(where(is.numeric), ~ coalesce(., median(., na.rm = TRUE))))
customers
# Q7 - Join your four cleaned datasets together and call the joined dataset toys_joined.
# This join should keep all observations from all tables.
toys_joined <- transactions %>%
full_join(customers, by = "customer_id") %>%
full_join(toy_details, by = "toy_id") %>%
left_join(quality, by = "quality_id")
toys_joined
# Q9 - Remove any personally identifiable or sensitive information on customers
# Let's remove columns that hold sensitive information:
toys_joined_anonymous <- toys_joined %>%
select(-first_name, -last_name, -customer_age, -customer_gender, -customer_height_cm,
-customer_weight_kg)
toys_joined_anonymous
# Q10 - Write your new joined dataset (which does not contain personal/sensitive information) to a csv file
toys_joined_anonymous %>%
write_csv("toy_purchases_anonymous.csv")
# add the following sensitive customer info files to gitignore:
files_to_ignore <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
files_to_ignore
# write text file containing the names
writeLines(files_to_ignore, "ignore_files.txt")
# And add these files to the gitignore file (see screenshot provided as evidence!)
