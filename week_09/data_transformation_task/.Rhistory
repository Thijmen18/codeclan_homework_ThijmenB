toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:].?[:alpha:].?[:alpha:] -")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:].?[:alpha:]* ?[:alpha:]*")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:].?[:alpha:]*.?[:alpha:]*")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:].?[:alpha:].?[:alpha:]")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:].?[:alpha:]*.?[:alpha:]")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:].?[:alpha:]*.?[:alpha:]*")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) #%>%
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = ""))
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_name = str_replace(product_name, " -$", replacement = ""))
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_name = str_replace(product_name, " - $", replacement = ""))
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " - $", replacement = ""))
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = ""))
toys_descriptions <- toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = ""))
quality <- read_csv("raw_data/quality.csv")
quality
quality %>%
mutate(description = str_replace(description, "^Quality: "), "")
quality %>%
mutate(description = str_replace(description, "^Quality: "), replacement = "")
quality %>%
mutate(description = str_replace(description, "^Quality: "), replacement = "")
# first load libraries
library(tidyverse)
quality <- read_csv("raw_data/quality.csv")
quality %>%
mutate(description = str_replace(description, "^Quality: "), replacement = "")
quality %>%
mutate(description = str_replace(description, "^Quality: ", replacement = ""))
quality %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(dscription,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awfull" = "Bad"))
quality %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awfull" = "Bad"))
quality %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad"))
quality %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad".
quality %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad"))
library(fs)
customer_files <- "_customers.csv"
customer_files <- "\\_customers\\.csv"
#create the vector with all file names:
customer_files <- "\\_customers\\.csv"
dir_ls(customer_files)
#create the vector with all file names:
customer_files <- "raw_data/"
dir_ls(customer_files)
#create the vector with all file names:
data_files <- "raw_data/"
dir_ls(data_files)
dir_ls(data_files, regexp = "customers.csv$")
customer_csv <- dir_ls(data_files, regexp = "customers.csv$")
customer_csv %>%
map_dfr(read_csv)
dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv)
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(across(
where(is.numeric)) =
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ mean(.x, na.rm = TRUE))))
# create the dataframe combining all customer csv's
customers <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv)
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ mean(.x, na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = FALSE))))
?median
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(is.na, na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(is.na(.x), na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
?where
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
?coalesce
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric(is.na())),
~ median(.x, na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric(is.na(x))),
~ median(.x, na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric(is.na(.x))),
~ median(.x, na.rm = TRUE))))
across(where(is.numeric,
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers %>%
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
?across
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(is.na(.x), na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(is.na(.x)))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = FALSE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric & is.na(x)),
~ median(.x, na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric & is.na(.x)),
~ median(.x, na.rm = TRUE))))
across(where(is.numeric & NA,
across(where(is.numeric,
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers %>%
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
?coalesce
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(customer_age, na.rm = TRUE))))
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
customers
customers %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
# load in dataset
toy_transactions <- read_csv("raw_data/toy_transactions.csv")
# create the column date from day, month, year
toy_transactions_date <- toy_transactions %>%
mutate(date = make_datetime(year, month, day), .before = day)
toy_transactions_date
# create the column date from day, month, year
transactions <- toy_transactions %>%
mutate(date = make_datetime(year, month, day), .before = day)
toy_details <- toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = ""))
toys <- read_csv("raw_data/toys.csv")
toys_weight <- toys %>%
mutate(weight = str_replace(weight, "[g]", replacement = "")) %>%
mutate(weight = as.numeric(weight)) %>%
rename(weight_g = weight)
toy_details <- toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = ""))
quality_raw <- read_csv("raw_data/quality.csv")
quality_raw %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad"))
quality <- quality_raw %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad"))
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv)
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE))))
transactions
customers_all
quality
toy_details
?select
toy_details <- toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
select(!product)
toy_details
?rename
#toy_details <-
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
select(!product) %>%
rename(toy_id = id)
#toy_details <-
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
select(!product) %>%
rename(toy_id = id,
quality = quality_id)
#toy_details <-
toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
select(!product) %>%
rename(toy_id = id,
quality_id = quality)
toy_details <- toys_weight %>%
mutate(product_name = str_extract(product, "- [:alpha:]+ ?[:alpha:]*")) %>%
mutate(product_title = str_extract(product, "^[:alpha:]*.?[:alpha:]*.?[:alpha:]*")) %>%
mutate(product_name = str_replace(product_name, "^- ", replacement = "")) %>%
mutate(product_title = str_replace(product_title, " -$", replacement = "")) %>%
select(!product) %>%
rename(toy_id = id, quality_id = quality)
quality <- quality_raw %>%
mutate(description = str_replace(description, "^Quality: ", replacement = "")) %>%
# 2. Replace the categories so ‘Awesome’ and ‘Very Awesome’ become ‘Good’ and
# ‘Very Good’. Do the same thing for ‘Awful’ replacing it with ‘Bad’.
mutate(description = recode(description,
"Very Awesome" = "Very Good",
"Awesome" = "Good",
"Awful" = "Bad",
"Very Awful" = "Very Bad")) %>%
rename(quality_id = id)
quality
# create the dataframe combining all customer csv's
customers_all <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
customers_all
customers <-
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
rename(customer_id = id)
customers <-
customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup() %>%
rename(id = customer_id)
customers
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup() %>%
rename(id = customer_id)
customers
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup() %>%
rename(customer_id = id)
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup() #%>%
customers
customers <- customers_all %>%
group_by(customer_gender, customer_country) %>%
mutate(coalesce(
across(where(is.numeric),
~ median(.x, na.rm = TRUE)))) %>%
ungroup()
customers
# create the dataframe combining all customer csv's
customers <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
map_dfr(read_csv) %>%
rename(customer_id = id)
customers
transactions %>%
full_join(customers, by = customer_id) %>%
full_join(toy_details, by = toy_id) %>%
full_join(quality, by = quality_id)
transactions %>%
full_join(customers, by = "customer_id") %>%
full_join(toy_details, by = "toy_id") %>%
left_join(quality, by = "quality_id")
toys_joined <- transactions %>%
full_join(customers, by = "customer_id") %>%
full_join(toy_details, by = "toy_id") %>%
left_join(quality, by = "quality_id")
toys_joined
toys_joined %>%
mutate(first_name = str_sub(first_name, start = 1, end = 1))
toys_joined %>%
mutate(first_name = str_sub(first_name, start = 1, end = 1)) %>%
mutate(last_name = str_sub(last_name, start = 1, end = 1))
toys_joined_anonymous <- toys_joined %>%
mutate(first_name = str_sub(first_name, start = 1, end = 1)) %>%
mutate(last_name = str_sub(last_name, start = 1, end = 1))
toys_joined_anonymous
?write_csv
toys_joined_anonymous %>%
write_csv("toy_purchases_anonymous.csv")
customer_data <- dir_ls("raw_data/", regexp = "customers.csv$")
customer_data
customer_data <- dir_ls(regexp = "customers.csv$")
customer_data
ls
?ls
customer_data <- ls("raw_data/", regexp = "customers.csv$")
ls()
ls("raw_data/")
ls("raw_data/.")
ls("./raw_data")
ls("/raw_data")
ls("raw_data/")
ls()
dir_ls("raw_data/", regexp = "customers.csv$")
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
?write_lines
ignore_customer_data <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
write_tsv(ignore_customer_data, "to_ignore.txt")
write_csv(ignore_customer_data, "to_ignore.csv")
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10) %>%
class()
dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
files_to_ignore <- dir_ls("raw_data/", regexp = "customers.csv$") %>%
str_sub(start = 10)
# write text file containing the names
writeLines(files_to_ignore, "ignore_files.txt")
