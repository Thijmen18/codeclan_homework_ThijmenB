library(tidyverse)
library(ggplot2)
sleep <- data("msleep")
head(sleep)
sleep <- data(msleep)
head(sleep)
sleep <- ggplot::data(msleep)
sleep <- ggplot2::data(msleep)
data(msleep)
data(msleep)
force(msleep)
View(msleep)
sleep <- data(msleep)
sleep <- data(msleep)
library(tidyverse)
library(tidyverse)
library(ggplot2)
sleep <- data(msleep)
force(msleep)
View(msleep)
sleep <- msleep
data(msleep)
data(msleep)
head(msleep)
skim(sleep)
skimr(sleep)
library(skimr)
skim(sleep)
skim(msleep)
glimpse(msleep)
head(msleep)
# 2. Calculate test statistic
observed_stat <- msleep %>%
summarise(mean_sleep = mean(sleep_total)) %>%
pull()
observed_stat
# 3. we create the null distribution by bootstrapping
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesize(null = "point", mu = 7) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
library(infer)
# 3. we create the null distribution by bootstrapping
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesize(null = "point", mu = 7) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
# 4. visualise and plot the observed statistic on the null distribution
null_distribution %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat, direction = "both") #both, because we just want to test for significant difference
# 5. calculate the p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "both")
p_value
# create the dataset
vore_sleep <- msleep %>%
select(vore, sleep_total) %>%
filter(str_detect(vore, "omni|herbi"))
vore_sleep
# 3. create null distribution
null_distribution_vore <- vore_sleep %>%
specify(response = sleep_total, explanatory = vore) %>% #the relationship between length and species we test
hypothesize(null = "independence") %>% # null hypothesis = no relationship
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi")) #sample stat is mean(omni)-mean(herbi)
# 4. calculate observed statistic
observed_stat_vore <- vore_sleep %>%
specify(response = sleep_total, explanatory = vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
observed_stat_vore
# 5. p-value
p_value_vore <- null_distribution_vore %>%
get_p_value(obs_stat = observed_stat_vore, direction = "right")
p_value_vore
# we use standard Î± = 0.05
head(msleep)
# 2. edit/create the dataset (lots of NA's for non-domesticated animals)
domestic_msleep <- msleep %>%
mutate(is_domestic = if_else(conservation == "domesticated", TRUE, FALSE))
domestic_msleep
# 2. edit/create the dataset (lots of NA's for non-domesticated animals)
domestic_msleep <- msleep %>%
mutate(is_domestic = if_else(conservation == "domesticated", TRUE, FALSE), .before = "genus")
domestic_msleep
?if_else
# 2. edit/create the dataset (lots of NA's for non-domesticated animals)
domestic_msleep <- msleep %>%
mutate(is_domestic = if_else(conservation == "domesticated", TRUE, FALSE,
missing = NULL), .before = "genus")
domestic_msleep
# 2. edit/create the dataset (lots of NA's for non-domesticated animals)
domestic_msleep <- msleep %>%
mutate(is_domestic = if_else(conservation == "domesticated", TRUE, FALSE,
missing = "not"), .before = "genus")
# 2. edit/create the dataset (lots of NA's for non-domesticated animals)
domestic_msleep <- msleep %>%
mutate(is_domestic = if_else(conservation == "domesticated", TRUE, FALSE,
missing = FALSE), .before = "genus")
domestic_msleep
# 2. create null distribution
null_distribution_prop <- domestic_msleep %>%
specify(response = is_domestic, success = 1) %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
# 2. create null distribution
null_distribution_prop <- domestic_msleep %>%
specify(response = is_domestic, success = "TRUE") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
head(null_distribution_prop)
summarise(prop = n()/nrow(domestic_msleep)) #%>%
# 3. calculate observed stat
domestic_msleep %>%
group_by(is_domestic) %>%
summarise(prop = n()/nrow(domestic_msleep)) #%>%
filter(is_domestic == "TRUE")
# 3. calculate observed stat
observed_stat_prop <- domestic_msleep %>%
group_by(is_domestic) %>%
summarise(prop = n()/nrow(domestic_msleep)) %>%
filter(is_domestic == "TRUE") %>%
pull()
observed_stat_prop
# let's calculate the p-value
p-value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "right")
# 3. calculate observed stat
observed_stat_prop <- domestic_msleep %>%
group_by(is_domestic) %>%
summarise(prop = n()/nrow(domestic_msleep)) %>%
filter(is_domestic == "TRUE") %>%
pull() # 0.12
# let's calculate the p-value
p-value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "right")
# 2. create null distribution
null_distribution_prop <- domestic_msleep %>%
specify(response = is_domestic, success = "TRUE") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
# let's calculate the p-value
p-value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "right")
# let's calculate the p-value
p-value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "both")
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(skimr)
library(infer)
data(msleep)
# 2. edit/create the dataset (lots of NA's for non-domesticated animals)
domestic_msleep <- msleep %>%
mutate(is_domestic = if_else(conservation == "domesticated", TRUE, FALSE,
missing = FALSE), .before = "genus")
# 2. create null distribution
null_distribution_prop <- domestic_msleep %>%
specify(response = is_domestic, success = "TRUE") %>%
hypothesize(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
# 3. calculate observed stat
observed_stat_prop <- domestic_msleep %>%
group_by(is_domestic) %>%
summarise(prop = n()/nrow(domestic_msleep)) %>%
filter(is_domestic == "TRUE") %>%
pull() # 0.12
# let's calculate the p-value
p-value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "both")
# 4. let's visualise
null_distribution_prop %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat_prop, direction = "both")
# 4. let's visualise
null_distribution_prop %>%
visualise(bins = 30) +
shade_p_value(obs_stat = observed_stat_prop, direction = "both")
# 4. let's visualise
null_distribution_prop %>%
visualise(bins = 5) +
shade_p_value(obs_stat = observed_stat_prop, direction = "both")
# 4. let's visualise
null_distribution_prop %>%
visualise(bins = 20) +
shade_p_value(obs_stat = observed_stat_prop, direction = "both")
# 4. let's visualise
null_distribution_prop %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat_prop, direction = "both")
# 4. let's visualise
null_distribution_prop %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat_prop, direction = "right")
# let's calculate the p-value
p-value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "right")
# let's calculate the p-value
p_value <- null_distribution_prop %>%
get_p_value(obs_stat = observed_stat_prop, direction = "right")
p_value #
